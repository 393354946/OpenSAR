import sys,os
import xml.etree.ElementTree as ET
from GenCanIf import GenCanIf
from GenCanTp import GenCanTp
from GenPduR import GenPduR

__all__ = ['GenCom']


__Header = \
"""/*
* Configuration of module: Com
*
* Created by:   parai          
* Copyright:    (C)parai@foxmail.com  
*
* Configured for (MCU):    MinGW ...
*
* Module vendor:           ArcCore
* Generator version:       2.0.34
*
* Generated by easySAR Studio (https://github.com/parai/OpenSAR)
*/
"""

__dir = '.'
__root = None

def GenCom(wfxml):
    global __dir,__root
    __root = ET.parse(wfxml).getroot();
    __dir = os.path.dirname(wfxml)
    GenCanIf(wfxml)
    GenCanTp(wfxml)
    GenPduR (wfxml)
    GenH()
    GenC()


def tInt(strnum):
    if(strnum.find('0x') or strnum.find('0X')):
        return int(strnum,16)
    else:
        return int(strnum,10)
    
def GAGet(what,which):
    # what must be a pdu = [ Name, Id, Bus]
    if(which == 'name'):
        return what[0]
    elif(which == 'id'):
        return hex(tInt(what[1]))
    elif(which == 'bus'):
        return what[2]

def GLGet(what):
    """ Gen Get List
        Get A Special List []
    """
    global __root
    import re
    # (Type=RX/TX ) (Name) (Id)
    reMsg = re.compile(r'(\w+)\s*=\s*(\w+)\s*\(\s*(\w+)\s*\)')
    if(what == 'Signal'):
        return __root.find('SignalList')
    rlist =[]
    if(what == 'TxPdu'):
        for Signal in __root.find('SignalList'):
            msg = Signal.attrib['msg']
            try:
                msg = reMsg.search(msg).groups()
                if(msg[0] == 'TX'):
                   flag = False
                   for pdu in rlist:
                       # If has same Id and Bus
                       if(msg[2] == pdu[1] and Signal.attrib['bus'] == pdu[2]):
                           if(msg[1]) != pdu[0]:
                               raise Exception('Name must be the same if the message has the same Id on the same Bus.')
                           flag = True
                   if(False == flag):
                       pdu = []
                       pdu.append(msg[1])
                       pdu.append(msg[2])
                       pdu.append(Signal.attrib['bus'])
                       rlist.append(pdu)
            except:
                print traceback.format_exc()
                print 'PduR: Error Message Configured for %s'%(Signal.attrib['name'])
    elif(what == 'RxPdu'):
        for Signal in __root.find('SignalList'):
            msg = Signal.attrib['msg']
            try:
                msg = reMsg.search(msg).groups()
                if(msg[0] == 'RX'):
                   flag = False
                   for pdu in rlist:
                       if(msg[2] == pdu[1] and Signal.attrib['bus'] == pdu[2]):
                           if(msg[1]) != pdu[0]:
                               raise Exception('Name must be the same if the message has the same Id on the same Bus.')
                           flag = True
                   if(False == flag):
                       pdu = []
                       pdu.append(msg[1])
                       pdu.append(msg[2])
                       pdu.append(Signal.attrib['bus'])
                       rlist.append(pdu)
            except:
                print traceback.format_exc()
                print 'PduR: Error Message Configured for %s'%(Signal.attrib['name'])
    return rlist

def GenH():
    global __dir
    # =========================  PduR_Cfg.h ==================
    fp = open('%s/Com_Cfg.h'%(__dir),'w')
    fp.write(__Header)
    fp.write("""

#if !(((COM_SW_MAJOR_VERSION == 1) && (COM_SW_MINOR_VERSION == 2)))
#error Com: Configuration file expected BSW module version to be 1.2.*
#endif

#ifndef COM_CFG_H_
#define COM_CFG_H_

#define COM_MODULE_ID 20
#define COM_INSTANCE_ID 1
#define COM_E_INVALID_FILTER_CONFIGURATION 101
#define COM_E_INITIALIZATION_FAILED 102
#define COM_E_INVALID_SIGNAL_CONFIGURATION 103
#define COM_INVALID_PDU_ID 104
#define COM_INVALID_SIGNAL_ID 109
#define COM_ERROR_SIGNAL_IS_SIGNALGROUP 105
#define COM_E_TOO_MANY_IPDU 106
#define COM_E_TOO_MANY_SIGNAL 107
#define COM_E_TOO_MANY_GROUPSIGNAL 108
#define CPU_ENDIANESS COM_BIG_ENDIAN

#define COM_DEV_ERROR_DETECT STD_OFF

#define COM_N_IPDUS %s
#define COM_N_SIGNALS %s
#define COM_N_GROUP_SIGNALS 0 // TODO: not support by easyCom studio

#define ComConfigurationTimeBase 0
#define ComVersionInfoApi

#endif /*COM_CFG_H*/
    """%(len(GLGet('RxPdu')+GLGet('TxPdu')),len(GLGet('Signal')) ))
    fp.close()

def GenC():
    pass

