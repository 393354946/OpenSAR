/*
* Configuration of module: Os
*
* Created by:   parai          
* Copyright:    (C)parai@foxmail.com  
*
* Configured for (MCU):    MinGW ...
*
* Module vendor:           ArcCore
* Generator version:       2.0.34
*
* Generated by easySAR Studio (https://github.com/parai/OpenSAR)
*/

#if !(((OS_SW_MAJOR_VERSION == 2) && (OS_SW_MINOR_VERSION == 0)) )
#error Os: Configuration file expected BSW module version to be 2.0.*
#endif

#ifndef OS_CFG_H_
#define OS_CFG_H_

// Application Id's
#define APPLICATION_ID_OsDefaultApplication  0  // TODO: 

// Alarm Id's
#define ALARM_ID_Alarm10ms 0
#define ALARM_ID_Alarm20ms 1
#define ALARM_ID_Alarm100ms 2
#define ALARM_ID_Alarm1000ms 3

// Counter Id's
#define COUNTER_ID_Counter0 0

// System counter TODO
#define OSMAXALLOWEDVALUE        UINT_MAX// NOT CONFIGURABLE IN TOOLS
#define OSTICKSPERBASE            1       // NOT CONFIGURABLE IN TOOLS
#define OSMINCYCLE                1        // NOT CONFIGURABLE IN TOOLS
#define OSTICKDURATION            1000000UL    // Time between ticks in nano seconds

// Counter macros
#define OSMAXALLOWEDVALUE__Counter0 OSMAXALLOWEDVALUE //TODO: I set the first counter configured by easySAR as system counter, sorry
#define OSTICKSPERBASE_Counter0 1 // NOT CONFIGURABLE IN TOOLS,sorry
#define OSMINCYCLE_Counter0 1

#define OS_TICKS2SEC_Counter0(_ticks)       ( (OSTICKDURATION * _ticks)/1000000000UL )
#define OS_TICKS2MS_Counter0(_ticks)        ( (OSTICKDURATION * _ticks)/1000000UL )
#define OS_TICKS2US_Counter0(_ticks)        ( (OSTICKDURATION * _ticks)/1000UL )
#define OS_TICKS2NS_Counter0(_ticks)        (OSTICKDURATION * _ticks)
            
// Event masks
#define EVENT_MASK_EventTask10ms 0x01 // of Task10ms
#define EVENT_MASK_EventTask20ms 0x01 // of Task20ms
#define EVENT_MASK_EventTask100ms 0x01 // of Task100ms
#define EVENT_MASK_Event1 0x1 // of TaskEvent
#define EVENT_MASK_Event2 0x2 // of TaskEvent
#define EVENT_MASK_Event3 0x4 // of TaskEvent
#define EVENT_MASK_Event4 0x8 // of TaskEvent
#define EVENT_MASK_Event5 0x10 // of TaskEvent
#define EVENT_MASK_Event1000ms 0x20 // of TaskEvent

// Isr Id's

// Resource Id's

// Linked resource id's

// Resource masks

// Task Id's
#define TASK_ID_OsIdle    0 // TODO, generate it by default
#define TASK_ID_Task10ms 1
#define TASK_ID_Task20ms 2
#define TASK_ID_Task100ms 3
#define TASK_ID_TaskEvent 4

// Task entry points
extern void OsIdle( void );
extern void Task10ms( void );
extern void Task20ms( void );
extern void Task100ms( void );
extern void TaskEvent( void );

// Schedule table id's

// Stack size
#define OS_INTERRUPT_STACK_SIZE    2048    // TODO
#define OS_OSIDLE_STACK_SIZE 512            // TODO

#define OS_ALARM_CNT            4
#define OS_TASK_CNT             5
#define OS_SCHTBL_CNT           0
#define OS_COUNTER_CNT          1
#define OS_EVENTS_CNT           9

// TODO: 
//#define OS_ISRS_CNT                 0
#define OS_RESOURCE_CNT               0
#define OS_LINKED_RESOURCE_CNT        0
#define OS_APPLICATION_CNT            1    // TODO
#define OS_SERVICE_CNT                0  /* ARCTICSTUDIO_GENERATOR_TODO */
#define CFG_OS_DEBUG                  STD_OFF

#define OS_SC1                        STD_ON     /* NOT CONFIGURABLE IN TOOLS */
#define OS_USE_APPLICATIONS           STD_ON
#define OS_USE_MEMORY_PROT            STD_OFF    /* NOT CONFIGURABLE IN TOOLS */
#define OS_USE_TASK_TIMING_PROT       STD_OFF    /* NOT CONFIGURABLE IN TOOLS */
#define OS_USE_ISR_TIMING_PROT        STD_OFF    /* NOT CONFIGURABLE IN TOOLS */
//#define OS_SC3                      STD_ON     /* NOT CONFIGURABLE IN TOOLS */  
#define OS_STACK_MONITORING           STD_ON
#define OS_STATUS_EXTENDED            STD_ON
#define OS_USE_GET_SERVICE_ID         STD_ON     /* NOT CONFIGURABLE IN TOOLS */
#define OS_USE_PARAMETER_ACCESS       STD_ON     /* NOT CONFIGURABLE IN TOOLS */
#define OS_RES_SCHEDULER              STD_ON     /* NOT CONFIGURABLE IN TOOLS */

#define OS_ISR_CNT          0
#define OS_ISR2_CNT         0
#define OS_ISR1_CNT         0

#define OS_ISR_MAX_CNT      10

#define OS_NUM_CORES        1
#endif /*OS_CFG_H_*/

